{"version":3,"sources":["components/Feedback/FeedbackOptions.js","components/Statistics/Statistics.js","components/Cover/Cover.js","components/Notification.js","App.js","reportWebVitals.js","index.js","components/Feedback/FeedbackOptions.module.css","components/Cover/Cover.module.css"],"names":["Feedback","options","onLeaveFeedback","className","s","ulBtn","map","feedback","type","name","onClick","button","Statistics","good","neutral","bad","total","positivePercentage","Cover","title","children","section","Notification","message","App","state","e","grade","target","setState","currentValue","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","this","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6SAgBeA,EAXE,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBACxB,OACI,oBAAIC,UAAWC,IAAEC,MAAjB,SACKJ,EAAQK,KAAI,SAAAC,GAAQ,OACjB,mCAAoB,wBAAQC,KAAK,SAASC,KAAMF,EAAUG,QAASR,EAAiBC,UAAWC,IAAEO,OAA7E,SAAsFJ,MAAjGA,SCKVK,EAZI,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,IAAKC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,mBAC5C,OACI,+BACI,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,W,gBCGGC,EATD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACpB,OACI,0BAASjB,UAAWC,IAAEiB,QAAtB,UACI,mBAAGlB,UAAWC,IAAEe,MAAhB,SAAwBA,IACvBC,MCEEE,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACI,8BACI,4BAAIA,OCqDDC,E,4MAlDbC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPb,gBAAkB,SAACwB,GACjB,IAAMC,EAAQD,EAAEE,OAAOnB,KACvB,EAAKoB,UAAS,SAACC,GAAD,sBACXH,EAAQG,EAAaH,GAAS,O,EAInCI,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKR,OAAOS,QAAO,SAACC,EAAKC,GAAN,OAAiBD,EAAOC,IAAQ,I,EAG1EC,gCAAkC,SAACxB,EAAMG,GACvC,OAAOsB,KAAKC,MAAc,IAAP1B,EAAYG,I,4CAGjC,WACE,IAAMA,EAAQwB,KAAKT,qBACbd,EAAqBuB,KAAKH,gCAAgCG,KAAKf,MAAMZ,KAAMG,GAC3Ef,EAAU+B,OAAOS,KAAKD,KAAKf,OACjC,OACE,gCACE,cAAC,EAAD,CACEN,MAAM,wBADR,SAEE,cAAC,EAAD,CACElB,QAASA,EACTC,gBAAiBsC,KAAKtC,oBAE1B,cAAC,EAAD,CACEiB,MAAM,aADR,SAEGH,EAAM,EACF,cAAC,EAAD,CACHH,KAAM2B,KAAKf,MAAMZ,KACjBC,QAAS0B,KAAKf,MAAMX,QACpBC,IAAKyB,KAAKf,MAAMV,IAChBC,MAAOA,EACPC,mBAAoBA,IACjB,cAAC,EAAD,CAAcM,QAAQ,+B,GA3CnBmB,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,gCAAgC,MAAQ,iC,kBCAnED,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,wB","file":"static/js/main.09ea876e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\n\r\nconst Feedback = ({options, onLeaveFeedback}) => {\r\n    return (\r\n        <ul className={s.ulBtn}>\r\n            {options.map(feedback => (\r\n                <li key={feedback}> <button type=\"button\" name={feedback} onClick={onLeaveFeedback} className={s.button}>{feedback}</button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Feedback;\r\n\r\nFeedback.propTypes = {\r\n    options: PropTypes.array,\r\n    onLeaveFeedback: PropTypes.func,\r\n}","import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({good, neutral, bad, total, positivePercentage}) => {\r\n    return (\r\n        <ul>\r\n            <li>Good: {good}</li>\r\n            <li>Neutral: {neutral}</li>\r\n            <li>Bad: {bad}</li>\r\n            <li>Total: {total}</li>\r\n            <li>Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.number,\r\n}","import PropTypes from 'prop-types';\r\nimport s from './Cover.module.css';\r\n\r\nconst Cover = ({ title, children }) => {\r\n    return (\r\n        <section className={s.section}>\r\n            <p className={s.title}>{title}</p>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Cover;\r\n\r\nCover.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n}","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n    return (\r\n        <div>\r\n            <p>{message}</p>\r\n        </div>);\r\n}\r\n\r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string,\r\n}","import './App.css';\nimport React, { Component } from 'react';\nimport Feedback from './components/Feedback/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Cover from './components/Cover/Cover';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n\n  onLeaveFeedback = (e) => {\n    const grade = e.target.name;\n    this.setState((currentValue) => ({\n      [grade]: currentValue[grade] + 1,\n    }))\n  }\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, value) => (acc += value), 0);\n  }\n\n  countPositiveFeedbackPercentage = (good, total) => {\n    return Math.round((good * 100)/total);\n  }\n  \n  render() {\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage(this.state.good, total);\n    const options = Object.keys(this.state);\n    return (\n      <div>\n        <Cover\n          title=\"Please leave feedback\">\n          <Feedback\n            options={options}\n            onLeaveFeedback={this.onLeaveFeedback} />\n        </Cover>\n        <Cover\n          title=\"Statistics\">\n          {total>0\n            ? (<Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={total}\n            positivePercentage={positivePercentage} />)\n            : (<Notification message=\"No feedback given\" />)\n          }          \n        </Cover>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__N2f3B\",\"ulBtn\":\"FeedbackOptions_ulBtn__2UMAC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Cover_section__179tU\",\"title\":\"Cover_title__CM1sV\"};"],"sourceRoot":""}